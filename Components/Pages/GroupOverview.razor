@page "/group/{GroupSlug}"

@using GroupOrder.Data
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

@inject IDbContextFactory<GroupContext> DbFactory

<PageTitle>Mampf.Link @Group?.GroupName</PageTitle>

@if (Group != null)
{
    <h1>Group Overview: @Group?.GroupName</h1>
    
    <p>@Group?.Description</p>

    <table class="table">
        <thead>
        <tr>
            <th>
                Name
            </th>
            <th>
                Food
            </th>
            <th>
                Price
            </th>
            <th>
                Actions
            </th>
        </tr>
        </thead>
        <tbody>
        @foreach (Order order in Group!.Orders)
        {
        <tr>
            <td>
                @order.Name
            </td>
            <td>
                @order.Food
            </td>
            <td>
                @order.getPrice()€
            </td>
            <td>
                @if (!string.IsNullOrEmpty(Group.PaypalUsername))
                {
                    <a href="" style="text-decoration: none" data-bs-toggle="modal" data-bs-target="#paidModal" onclick="window.open('https://www.paypal.com/paypalme/@Group.PaypalUsername/@order.getPrice()')" @onmouseenter="() => { showPaidModal = order; }">💳</a>
                }
            </td>
        </tr>
        }
        </tbody>
    </table>
}

@if (showPaidModal != null)
{
    <div id="paidModal" class="modal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Already paid?</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                    <div class="modal-body">
                        <p>Have you sent @showPaidModal.getPrice()€?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="() => { Paid(showPaidModal.Id); showPaidModal = null; }">Yes</button>
                        <button type="button" class="btn btn-secondary"data-bs-dismiss="modal" data-bs-dismiss="modal" @onclick="() => showPaidModal = null">Not yet</button>
                    </div>
            </div>
        </div>
    </div>
}

@code {
    
    private Group? Group { get; set; }

    private bool Loading { get; set; } = false;
    private bool NotFound { get; set; } = false;

    private Order? showPaidModal;
    
    [Parameter]
    public string? GroupSlug { get; set; }

    public Order Order { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await LoadGroupAsync();
        await base.OnParametersSetAsync();
    }
    
    
    // Loads the contact.
    private async Task LoadGroupAsync()
    {
        if (Loading)
        {
            return; //avoid concurrent requests.
        }

        Group = null;
        Loading = true;

        using var context = DbFactory.CreateDbContext();

        if (context.Groups is not null)
        {
            Group = await context.Groups
                .Include(group => group.Orders)
                .SingleOrDefaultAsync(
                    c => c.GroupSlug == GroupSlug);

            if (Group is null)
            {
                NotFound = true;
            }
        }

        Loading = false;
    }

    private void Paid(int orderId)
    {
        using var context = DbFactory.CreateDbContext();
        Order order = context.Orders.Find(orderId)!;
        if (order.PaymentStatus == PaymentStatus.Unpaid)
        {
            order.PaymentStatus = PaymentStatus.PaymentPending;
            context.SaveChanges();
        }
    }
    
}
